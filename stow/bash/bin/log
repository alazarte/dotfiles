#!/bin/bash

# TODO: replace git with keybase, sync should be just copying over the files
# from logspath over to /keybase/private/{username}/logs or something

# simple init variables
logspath=$HOME/var/log
filename=human.log

write_log() {
	# write log to both stdout and filename, after cd
	timestamp=`date +%Y/%m/%d\ %H:%M`
	echo "[$timestamp] $@" | tee -a $filename
}

git_init() {
	git init
	git remote add origin $GIT_HUMAN_LOG_ORIGIN
	git pull
	# git init should create a master, then I should do
	#     git branch -u origin/master master
	# but it says that master does not exists?
	# switching or checkout master sets origin/master as tracking branch
	# and also says that I'm already on branch master
	git switch master
}

git_commit() {
	# git add filename to log
	git add $filename
	# git commit with simple message
	git commit -m "update $filename"
	# git push? or log --push to update repo with log?
}

git_push() {
	git push
}

git_pull() {
	# this should be it...
	git pull
}

checks() {
	[[ -d .git ]] || git_init
}

edit_log() {
	$EDITOR $logspath/$filename
	git_commit
}

log() {
	checks
	write_log "$@"
	git_commit
}

show_help() {
	cat << EOF
log <arguments> <message>

Available arguments:
	--type -t <type> Write to <type> instead of default
	--help           Show this help message
	--push           Push to repo origin
	--pull           Pull from repo origin
	--edit           Open log to edit
	<message>
		Message to log and commit

WARNING: --type -t flag should be the first argument if going to edit a
specific log
EOF
}

# TODO: add flag to force writing to an un-existing type, creating the file first
# TODO: add flag to simply create new log
parse_args_and_run() {
	case "$1" in
		# TODO: type sholdn't be the first arg for it to actually work
		# TODO: add check when file doesn't exists
		-t|--type) filename=$2.log ; shift ; shift ; parse_args_and_run "$@" ;;
		--help) show_help "$@" ;;
		# TODO: instead of having flags to push or pull, use `git -C` and call
		# log git <git command>
		--push) git_push "$@" ;;
		--pull) git_pull "$@" ;;
		--edit) edit_log "$@" ;;
		*) log "$@" ;;
	esac
}

[[ -d $logspath ]] || mkdir -p $logspath

cd $logspath

parse_args_and_run "$@"

# go back to where you were working
cd -
