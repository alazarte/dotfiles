syntax on

" Vundle config
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-commentary'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'vimwiki/vimwiki'
call vundle#end()
filetype plugin indent on

" hidden buffer to hold changes in current file with changes
set hidden
set wildmenu
set wildmode=list:longest:full
set showcmd
set relativenumber
set number
" start search while typing
set incsearch
set hlsearch
" show trailing chars
set list lcs=tab:>\ ,trail:.
set tags=tags
" . current directory for file
" current directory ...
" ** recursive
set path=.,**
" how much ctrl+{d,u} scrolls
set scroll=10
set background=dark
" write and load changes
set sidescrolloff=5
" show @@@ if line is truncated
set display=truncate
set laststatus=2
set nowrap
set showcmd ruler ttyfast
set statusline=%y\ %f\ %m\ %r\ %w\ %q\ %=%P\ %l:%c

" Configure netrw
" keep in the dir where I open netrw
let g:netrw_keepdir=1
" no banner
let g:netrw_banner=0

" Configure colorscheme
set termguicolors
let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"

colorscheme default

set background=dark

hi LineNr guifg=gray50
hi CursorLine cterm=none guibg=gray20
hi CursorLineNr cterm=bold guifg=yellow
hi SpellBad guifg=white guibg=red
hi SpellRare guifg=black guibg=cyan
hi Visual guifg=black
" TODO: something

hi Todo guibg=red guifg=white cterm=bold
hi diffRemoved guifg=red guibg=NONE
hi diffAdded guifg=green guibg=NONE
hi diffFile guifg=cyan guibg=NONE
hi diffOldFile guifg=cyan guibg=NONE
hi diffNewFile guifg=cyan guibg=NONE
hi markdownCodeBlock guifg=gray guibg=NONE
hi markdownCode guifg=gray guibg=NONE

" spelling
map <leader>s :setlocal spell! spelllang=en_us<cr>
" vim config
map <leader>v <esc>:e ~/.vim/vimrc<cr>
map <leader>l <esc>:so ~/.vim/vimrc<cr>
" generate tags
nmap <leader>t :MakeTags<cr>
" gf open file even if it does not exists
map gf :e <cfile><CR>
" check changes in file before saving
" to mayus 'cause vimwiki mapping...
map <leader>W :w ! diff --color % -<cr>
" insert output date to current cursor position
map <leader>d :r!date '+\%Y-\%m-\%d \%H:\%M'<cr>kJ
" adding kJ to append to previous line instead of new line

" keep current buffer and delete all the rest
command! BufOnly silent! execute "%bd|e#|bd#"
command! MakeTags ! ctags -R --languages=go --exclude=vendor .

" augroups
" from $VIMRUNTIME/defaults.vim
augroup vimStartup
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
  \ |   exe "normal! g`\""
  \ | endif

augroup END

" ==== VIMWIKI config ====
" new config
let wiki_1 = {}
let wiki_1.path = '/keybase/private/alazarte/vimwiki'
" list of wikis
let g:vimwiki_list = [wiki_1]

" Markdown folding headers

" ==== MARKDOWN folding ====
" TODO this is from stackoverflow, paste URL here
function! MarkdownLevel()
    let h = matchstr(getline(v:lnum), '^#\+')
    if empty(h)
        return "="
    else
        return ">" . len(h)
    endif
endfunction

au BufEnter *.md setlocal foldexpr=MarkdownLevel()
au BufEnter *.md setlocal foldmethod=expr
" syntax

" highlight TODO keyword everywhere
au BufEnter * syntax keyword Todo TODO
