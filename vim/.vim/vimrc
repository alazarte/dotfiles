" Vundle config {{{

set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-sleuth'
Plugin 'tpope/vim-commentary'
Plugin 'vim-scripts/AfterColors.vim'
call vundle#end()
filetype plugin indent on

" }}}
" Letters {{{

let g:netrw_keepdir=0
let mapleader = ","

" }}}
" Setters {{{

set showcmd
set relativenumber
set number

" start search while typing
set hlsearch

" hidden buffer to hold changes in current file with changes
set hidden

" show trailing chars
set list

set tags=tags;

" . current directory for file
" current directory ...
" ** recursive
set path=.,,**

" TODO choose a better termwinkey
set termwinkey=<C-A>

set scroll=10

set background=dark

" write and load changes
set autowriteall
" this probably won't work as expected
set autoread

" }}}
" Explorer Configuration {{{

" remove banner in explore
let g:netrw_banner = 0
let g:netrw_liststyle = 3

" }}}
" Mapping {{{

" Clipboard
" TODO fix this
map <leader>c :w !xclip -selection clipboard<CR><CR>
map <leader>C :r!xclip -o<CR>

" spelling
map <leader>s :setlocal spell! spelllang=en_us<cr>

" vim config
map <leader>v <esc>:e ~/.vim/vimrc<cr>
map <leader>l <esc>:so ~/.vim/vimrc<cr>

" set path to current file in current tab only
map <leader>h <esc>:lcd %:h<cr>:pwd<cr>

" parsing single line json
map <leader>jq <esc>:%!jq<cr>

" generate tags
nmap <leader>t :MakeTags<cr>

" save as root
cnoremap w!! w !sudo tee % >/dev/null

" navigate in multi-single lines
map j gj
map k gk

" terminal mappings
tmap <c-j> <c-a>j
tmap <c-k> <c-a>k

" match c-a term map
nnoremap <c-a> <c-w>

" navigation with ctrl+{movement}
map <c-j> <c-a>j
map <c-k> <c-a>k

" gf open file even if it does not exists
map gf :e <cfile><CR>

"}}}
" Folding {{{

set foldenable
set foldlevel=0
set foldcolumn=0
set foldmethod=marker           " detect triple-{ style fold markers

" }}}
" Colorscheme {{{

colorscheme default

" }}}
" {{{ Restore cursor

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" }}}
" Commands {{{

command! MakeTags ! ctags -R .
command! GF ! go fmt ./...
command! GR ! go run %:p

" }}}
" Status Line {{{

set statusline=%y\ %f\ %m\ %r\ %w\ %q\ %=%l:%c

" }}}
