syntax on
" Vundle config {{{

set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-commentary'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'vim-scripts/AfterColors.vim'
Plugin 'jaredgorski/SpaceCamp'
call vundle#end()
filetype plugin indent on

" }}}
" Letters {{{

" netrw configuration
let g:netrw_keepdir=1
let g:netrw_banner = 0
let mapleader = ","

let g:vimwiki_list = [{'path': '~/my_site/',
           \ 'syntax': 'markdown', 'ext': '.md'}]
" }}}
" Setters {{{

set wildmenu
set wildmode=list:longest:full
set showcmd
set relativenumber
set number

" start search while typing
set incsearch
set hlsearch

" hidden buffer to hold changes in current file with changes
set hidden

" show trailing chars
set list lcs=tab:>\ ,trail:.

set tags=tags,/home/al/go/src/tags;

" . current directory for file
" current directory ...
" ** recursive
set path=.,,**

" TODO choose a better termwinkey
set termwinkey=<C-A>

" how much ctrl+{d,u} scrolls
set scroll=10

set background=dark

" write and load changes
set autowriteall
" this probably won't work as expected
set autoread

set ttyfast

" new windows are below or to the right
" set splitbelow
" set splitright

set scrolloff=1
set sidescrolloff=5

" show @@@ if line is truncated
set display=truncate

" }}}
" Mapping {{{

" spelling
map <leader>s :setlocal spell! spelllang=en_us<cr>

" vim config
map <leader>v <esc>:e ~/.vim/vimrc<cr>
map <leader>l <esc>:so ~/.vim/vimrc<cr>

" set path to current file in current tab only
map <leader>h <esc>:call LocalChangeDir()<cr>:pwd<cr>

" parsing single line json
map <leader>jq <esc>:%!jq<cr>

" generate tags
nmap <leader>t :MakeTags<cr>

" save as root
cnoremap w!! w !sudo tee % >/dev/null

" navigate in multi-single lines
map j gj
map k gk

" terminal mappings
tmap <c-j> <c-a>j
tmap <c-k> <c-a>k

" match c-a term map
nnoremap <c-a> <c-w>

" navigation with ctrl+{movement}
map <c-j> <c-a>j
map <c-k> <c-a>k
map <c-h> <c-a>h
map <c-l> <c-a>l

" gf open file even if it does not exists
map gf :e <cfile><CR>

map <leader>w :w ! diff --color % -<cr>

"}}}
" Folding {{{

set foldenable
set foldlevel=0
set foldcolumn=0
set foldmethod=marker           " detect triple-{ style fold markers

" }}}
" Colorscheme {{{

colorscheme default

" }}}
" Commands {{{

command! MakeTags ! tags.sh
command! GF ! go fmt %
command! GR ! go run %:p

" }}}
" Status Line {{{

set statusline=%y\ %f\ %m\ %r\ %w\ %q\ %=%P\ %l:%c

" }}}
" autocmds {{{
autocmd TerminalOpen * :set nonumber
autocmd TerminalOpen * :set norelativenumber
" }}}
" augroups {{{
" from $VIMRUNTIME/defaults.vim
augroup vimStartup
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
  \ |   exe "normal! g`\""
  \ | endif

augroup END
" }}}
" Functions {{{
function LocalChangeDir()
    if isdirectory(expand("%"))
        if expand("%") == ""
            lcd getcwd()
        else
            lcd %
        endif
    else
        lcd %:h
    endif
endfunction
"if &term =~ "xterm"        }}}
" from :help xterm-color, helps with bright colors? {{{
" I don't know if I care that much but is something
if &term =~ "xterm"
  if has("terminfo")
    set t_Co=8
    set t_Sf=<Esc>[3%p1%dm
    set t_Sb=<Esc>[4%p1%dm
  else
    set t_Co=8
    set t_Sf=<Esc>[3%dm
    set t_Sb=<Esc>[4%dm
  endif
endif
" }}}
" vimwiki config {{{
let wiki_1 = {}
let wiki_1.path = '~/vimwiki/'
let wiki_1.ext = 'md'
let wiki_1.syntax = 'markdown'
let g:vimwiki_list = [wiki_1]
let g:vimwiki_folding = 'expr'
" }}}
